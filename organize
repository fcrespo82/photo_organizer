#!./env/bin/python
"""
Organize your photos based on exif

usage:
    organize [-ddr] (-i <origin> | <origin> <destination>) [--exec] [--action <action>] [--no-dupes] [--file-types <types>]
    organize -v | -h

options:
    -d, -dd               Debug messages
    -r                    Recursive
    -i                    Organize in place (set the destination equals to origin)
    <origin>              Path to organize
    <destination>         Where to put the files
    --exec                Really execute the command, otherwise dry-run
    --no-dupes            Do not copy/move if file seen the same
    --action <action>     Action to perform copy or move [default: copy]
    --file-types <types>  Override filetypes to treat [default: jpg,cr2]

    -v, --version         Print program version
    -h, --help            Help
"""
import datetime
import os
import errno
import shutil
import re
import filecmp
from string import Template
from hachoir.parser import createParser
from hachoir.metadata import extractMetadata
from docopt import docopt

VERSION = "organize v1.0 beta"

FILENAME = Template("${hour}_${minute}_${second}.${extension}")
STRUCTURE = Template("${year}/${month}/${day}/${filename}")

SAME_FILE = "[SAME_FILE]"

def fullpath(path):
    return os.path.realpath(os.path.abspath(os.path.expanduser(os.path.expandvars(os.path.normpath(path)))))

def date_from_image(image):
    parser = createParser(image)
    metadata = extractMetadata(parser)
    if not metadata:
        return None
    try:
        date = metadata.get("creation_date")
    except ValueError:
        date = metadata.get("date_time_original")
    return datetime.datetime.strptime(str(date), "%Y-%m-%d %H:%M:%S")

def kwargs_from_image(image):
    date = date_from_image(image)
    if not date:
        return None
    return {'year': date.year, 'month': str(date.month).rjust(2, '0'), 'day': str(date.day).rjust(2, '0'), 'hour': str(date.hour).rjust(2, '0'), 'minute': str(date.minute).rjust(2, '0'), 'second': str(date.second).rjust(2, '0')}

def log_debug(message):
    if ARGS["-d"] > 0:
        print(message)

def log_debug_complete(message):
    if ARGS["-d"] > 1:
        print(message)

def log_dry_run(message):
    if not ARGS["--exec"]:
        print(message)

def recursive_name(origin, filename, _try=0):
    new_name = Template("${fullpathandname}${disambiguation}.${extension}")
    if not os.path.exists(filename):
        return filename
    else:
        log_debug_complete(os.stat(origin))
        log_debug_complete(os.stat(filename))
        if ARGS["--no-dupes"]:
            if filecmp.cmp(origin, filename, shallow=False):
                return SAME_FILE + " " + dst
        if _try > 0:
            disambiguation = "-" + str(_try).rjust(2, '0')
            match = re.match(r'(?P<fullpathandname>.*?)(?P<disambiguation>-.*)?\.(?P<extension>.*)', filename)
            if match:
                values = match.groupdict()
                values['disambiguation'] = disambiguation
                _filename = new_name.safe_substitute(values)
                #_filename = new_name.safe_substitute(fullpathandname=filename.split(".")[0], disambiguation=disambiguation, extension=filename.split(".")[1])
        else:
            _filename = filename
        return recursive_name(origin, _filename, _try+1)

def join_with_generator(rroot):
    def funcname(ffile):
        return os.path.join(rroot, ffile)
    return funcname

if __name__ == '__main__':
    ARGS = docopt(__doc__, version=VERSION)
    log_debug_complete(ARGS)

    FILETYPES = ARGS["--file-types"].split(",")

    if ARGS["--action"] not in ["move", "copy"]:
        print(Template("Error, '${action}' is not a valid action").safe_substitute(action=ARGS["--action"]))
        exit(errno.EBADEXEC)

    if ARGS["--version"]:
        print(VERSION)
        exit(0)

    FULLPATH_ORIGIN = fullpath(ARGS["<origin>"])
    if ARGS["-i"]:
        FULLPATH_DESTINATION = fullpath(ARGS["<origin>"])
    else:
        FULLPATH_DESTINATION = fullpath(ARGS["<destination>"])

    if os.path.exists(FULLPATH_ORIGIN):
        log_dry_run('Processing files')
        if ARGS["-r"]:
            log_dry_run('recursively')
        for root, dirs, files in os.walk(FULLPATH_ORIGIN):
            files = [file for file in files if file.lower().split('.')[-1] in FILETYPES and not file.startswith('.')]
            join_with_root = join_with_generator(root)
            files = map(join_with_root, files)
            for file in files:
                extension = file.split('.')[-1].lower()
                args = kwargs_from_image(file)
                if not args:
                    continue
                val = STRUCTURE.safe_substitute(args, filename=FILENAME.safe_substitute(args, extension=extension))
                src = os.path.join(root, file)
                dst = os.path.join(FULLPATH_DESTINATION, val)

                dest = os.path.dirname(dst)

                if not os.path.exists(dest) and ARGS["--exec"]:
                    os.makedirs(dest)

                log_debug(src)
                dst = recursive_name(src, dst)
                log_debug(dst)

                if SAME_FILE not in dst:
                    if ARGS["--action"] == 'copy':
                        log_debug("Copying file")
                        log_dry_run("Copying file to destination")
                        log_dry_run(dst)
                        if ARGS["--exec"]:
                            shutil.copy(src, dst)
                    elif ARGS["--action"] == 'move':
                        log_debug("Moving file")
                        log_dry_run("Moving file to destination")
                        log_dry_run(dst)
                        if ARGS["--exec"]:
                            try:
                                shutil.move(src, dst)
                            except IOError:
                                log_debug('Cant move file, skiping')

                else:
                    log_debug("Origin and destination are the same, not copying/moving")
                    log_dry_run("Origin and destination are the same, not copying/moving")
                log_debug("")
                log_dry_run("")
            if not ARGS["-r"]:
                break

        log_dry_run("Finish")
        print("0")
        exit(0)
    else:
        log_debug(Template("Path do not exist: {}").safe_substitute(FULLPATH_ORIGIN))
        print("ENOENT")
        exit(errno.ENOENT) # No such file or directory
