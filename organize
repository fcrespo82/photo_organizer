#!./env/bin/python
"""
Organize your photos based on exif

usage:
    organize [-d] <origin> <destination>
    organize -v

options:
    <origin>            path to organize
    <destination>       where to put the files
    -h                  help
    -v                  Print the version and exit
    -d                  DEBUG
"""
import datetime
import os
import errno
import shutil
from string import Template
import piexif
from docopt import docopt

VERSION = "organize v1.0 beta"

FILETYPES = ['jpg', 'cr2']

FILENAME = Template("${hour}_${minute}_${second}.${extension}")
STRUCTURE = Template("${year}/${month}/${day}/${filename}")

def fullpath(path):
    return os.path.realpath(os.path.abspath(os.path.expanduser(os.path.expandvars(os.path.normpath(path)))))

def date_from_image(image):
    exif_dict = piexif.load(image)
    date = exif_dict["Exif"][piexif.ExifIFD.DateTimeOriginal]
    return datetime.datetime.strptime(str(date), "b'%Y:%m:%d %H:%M:%S'")

def kwargs_from_image(image):
    date = date_from_image(image)
    return {'year': date.year, 'month': str(date.month).rjust(2, '0'), 'day': str(date.day).rjust(2, '0'), 'hour': str(date.hour).rjust(2, '0'), 'minute': str(date.minute).rjust(2, '0'), 'second': date.second}

def make_dir_from_date(date):
    pass

if __name__ == '__main__':
    ARGS = docopt(__doc__, version=VERSION)

    if ARGS["-v"]:
        print(VERSION)
        exit(0)

    FULLPATH_ORIGIN = fullpath(ARGS["<origin>"])
    FULLPATH_DESTINATION = fullpath(ARGS["<destination>"])

    if os.path.exists(FULLPATH_ORIGIN):
        for root, dirs, files in os.walk(FULLPATH_ORIGIN):
            files = [file for file in files if file.lower().split('.')[-1] in FILETYPES and not file.startswith('.')]
            files = map(lambda file: os.path.join(root, file), files)
            for file in files:
                extension = file.split('.')[-1].lower()
                val = STRUCTURE.safe_substitute(kwargs_from_image(file), filename=FILENAME.safe_substitute(kwargs_from_image(file), extension=extension))
                src = os.path.join(root, file)
                dst = os.path.join(FULLPATH_DESTINATION, val)

                dest = os.path.dirname(dst)
                if not os.path.exists(dest):
                    os.makedirs(dest)

                print(src)
                print(dst)

                #shutil.move(src, dst)
        exit(0)
    else:
        exit(errno.ENOENT) # No such file or directory
